(()=>{"use strict";class e{constructor(e,t,n,d,o,l,c){this.title=e,this.id=t,this.description=n,this.dueDate=d,this.priority=o,this.notes=l,this.checklist=c}}class t{constructor(e,t){this.clicked=e,this.id=t}}let n,d=[],o=[],l=0,c=()=>{let e=document.getElementById("addFeaturesForm");[...document.getElementsByClassName("addFeatures")].forEach((function(t){t.addEventListener("click",(function(){n=parseInt(this.parentNode.children[0].textContent),o[parseInt(n)].clicked=!0,console.log(o[parseInt(n)].clicked),console.log(n),console.log(this.parentNode.children[0].textContent),e.style.display="flex"}))}))},s=()=>{let e=[...document.getElementsByClassName("edit")],t=document.getElementById("editForm");e.forEach((function(e){e.addEventListener("click",(function(){t.style.display="flex"}))}))};(()=>{let e=document.getElementById("addProjectForm");document.getElementById("addProject").addEventListener("click",(function(){e.style.display="flex"})),document.getElementById("closeProjectButton").addEventListener("click",(function(){e.style.display="none"})),document.getElementById("enterProjectTitle").addEventListener("click",(function(){let t=document.getElementById("projectsList"),n=document.getElementById("projectTitle"),d=document.createElement("div"),o=document.createElement("p");o.textContent=n.value,d.classList.add("projectDiv"),o.classList.add("project"),t.appendChild(d),d.appendChild(o),e.style.display="none",n.value=""}))})(),(()=>{let n=document.getElementById("addTodoForm"),s=document.getElementById("addTodo"),i=document.getElementById("closeTodoButton"),a=document.getElementById("enterTodoTitle");s.addEventListener("click",(function(){n.style.display="flex"})),i.addEventListener("click",(function(){n.style.display="none"})),a.addEventListener("click",(function(){let s=[...document.getElementsByClassName("project")],i=document.getElementById("todoTitle"),a=document.getElementById("projectChoice");console.log(a.value),s.forEach((function(c){if(console.log(c),console.log(c.textContent),c.textContent===a.value){console.log(c),console.log(c.textContent);let s=new e(i.value,l),m=new t(!1,l),u=document.createElement("div"),r=document.createElement("div"),p=document.createElement("div");p.setAttribute("id",`${l}`),p.textContent=l,r.classList.add("todoDiv");let E=document.createElement("button");E.textContent="+",E.classList.add("addFeatures"),u.textContent=s.title,u.classList.add("todo"),c.parentNode.appendChild(r),r.appendChild(p),r.appendChild(u),r.appendChild(E),p.style.display="none",n.style.display="none",console.log(s),i.value="",a.value="",d.push(s),console.log(d),o.push(m),l++}})),c()}))})(),c(),(()=>{let e=document.getElementById("enterFeatures"),t=document.getElementById("addFeaturesForm");document.getElementById("closeFeaturesButton").addEventListener("click",(function(){t.style.display="none"})),e.addEventListener("click",(function(e){let o=[...document.getElementsByClassName("todo")],l=[...document.getElementsByClassName("addFeatures")];for(let e=0;e<=o.length;e++){let c=document.getElementById(`${e}`),i=d.find((e=>e.id===n));if(console.log(n),console.log(i),parseInt(c.textContent)===n){console.log(i.title),console.log(o[e].textContent),i.description=document.getElementById("description").value,i.dueDate=document.getElementById("dueDate").value,i.notes=document.getElementById("notes").value;let d=document.createElement("p");d.classList.add("info"),d.textContent=i.description;let a=document.createElement("p");a.classList.add("info"),a.textContent=i.dueDate;let m=document.createElement("p");m.textContent=i.notes,m.classList.add("info");let u=document.createElement("div");u.classList.add("featuresDiv");let r=document.createElement("div");r.classList.add("infoDiv");let p=document.createElement("div");p.classList.add("headingsDiv");let E=document.createElement("p");E.textContent="Description:";let y=document.createElement("p");y.textContent="Due Date:";let g=document.createElement("p");g.textContent="Your notes:",E.classList.add("heading"),y.classList.add("heading"),g.classList.add("heading"),c.parentNode.insertBefore(u,c.parentNode.children[2]),u.appendChild(p),u.appendChild(r),p.appendChild(E),p.appendChild(y),p.appendChild(g),r.appendChild(d),r.appendChild(a),r.appendChild(m),l[n].textContent="Edit",l[n].classList.add("edit"),s(),document.getElementById("closeEditForm").addEventListener("click",(function(){t.style.display="none",this.textContent="Edit"}));break}}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,